블록Blocking
호출된 함수가 자신이 할 일을 모두 마칠 때까지 제어권을 계속 가지고서 호출한 함수에게 바로 돌려주지 않으면 Block

논블럭Non-blocking
호출된 함수가 자신이 할 일을 채 마치지 않았더라도 바로 제어권을 건네주어(return) 호출한 함수가 다른 일을 진행할 수 있도록 해주면 Non-block

동기Synchronous
호출된 함수의 수행 결과 및 종료를 호출한 함수가(호출된 함수뿐 아니라 호출한 함수도 함께) 신경 쓰면 Synchronous

비동기Asynchronous
호출된 함수의 수행 결과 및 종료를 호출된 함수 혼자 직접 신경 쓰고 처리한다면(as a callback fn.) Asynchronous

[조합 정의]


1. 블록 + 동기

A가 실행되었다가 B라는 일을 수행하는 함수를 호출해서 B를 시작한다.
B라는 일이 끝나면 함수를 리턴한다

A와 B는 순차적으로 진행되기 때문에 '동기'이며
B라는 일을 하는 함수를 호출하고 그 일이 끝나고 나서야 리턴되므로 '블럭'

2. 블럭 + 비동기

일단 A와 B라는 일을 시킨다.
그리고 바로 리턴(논블럭)하고 B라는 일을 시작 / A도 자신의 일을 시작
A는 중간에 B라는 일이 하는 중간 결과를 보고 받아서 처리 (A가 B에게 요청 = '블럭)

요청의 결과를 받고나서 그 결과를 이용해서 A는 자신의 일을 처리

동시에 B는 자신의 일을 동시에 함 -> '비동기'
A는 다시 B에게 중간결과를 요청해서 기다림 -> '블럭'

3. 논블럭 / 동기

A는 B라는 일을 시킨 후 바로 리턴 -> '논블럭'
B는 일을 시작하는데, A는 자신의 일을 하지 않음 (A는 단지 B가 하는 일을 확인)

B가 결과 보고를 했는지를 확인하는 함수를 호출 후, 바로 리턴 -> '논블럭'

※ 결과 보고를 받을 떄 까지 기다리는게 아니라, 결과 보고가 나왔는지 확인하고 바로 리턴하는 것

4. 논블럭 / 비동기

A는 B의 일을 시작시키고 바로 리턴시킨다 -> '논블럭'
그리고 A와 B는 각자 자신의 일을 한다 -> '비동기'
